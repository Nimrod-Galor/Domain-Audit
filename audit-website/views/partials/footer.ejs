    </main>

    <!-- Footer -->
    <footer class="bg-dark text-light py-4 mt-5">
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <h5><i class="fas fa-chart-line me-2"></i>SiteScope</h5>
                    <p class="text-muted">Professional website audits made simple and affordable.</p>
                </div>
                <div class="col-md-3">
                    <h6>Quick Links</h6>
                    <ul class="list-unstyled">
                        <li><a href="/audit" class="text-light">Free Audit</a></li>
                        <li><a href="/about" class="text-light">About</a></li>
                        <li><a href="/contact" class="text-light">Contact</a></li>
                    </ul>
                </div>
                <div class="col-md-3">
                    <h6>Legal</h6>
                    <ul class="list-unstyled">
                        <li><a href="/privacy" class="text-light">Privacy Policy</a></li>
                        <li><a href="/terms" class="text-light">Terms of Service</a></li>
                    </ul>
                </div>
            </div>
            <hr class="my-3">
            <div class="text-center text-muted">
                <p>&copy; <%= new Date().getFullYear() %> SiteScope. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <!-- History Modal -->
    <div class="modal fade" id="historyModal" tabindex="-1" aria-labelledby="historyModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="historyModalLabel">
                        <i class="fas fa-history me-2"></i>View Audit History
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="historyForm">
                        <div class="mb-3">
                            <label for="historyDomain" class="form-label">Domain to view history for:</label>
                            <input type="text" class="form-control" id="historyDomain" 
                                   placeholder="e.g., example.com or https://example.com" required>
                            <div class="form-text">Enter the domain name (with or without https://)</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="viewHistory()">
                        <i class="fas fa-search me-1"></i>View History
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Notification Modal -->
    <div class="modal fade" id="notificationModal" tabindex="-1" aria-labelledby="notificationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="notificationModalLabel">
                        <i class="fas fa-bell me-2"></i>Notifications
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="text-muted" id="notificationInfo">Loading notifications...</div>
                        <button type="button" class="btn btn-sm btn-outline-primary" id="markAllReadBtn" onclick="markAllNotificationsAsRead()">
                            <i class="fas fa-check-double me-1"></i>Mark All Read
                        </button>
                    </div>
                    <div id="notificationsList">
                        <!-- Notifications will be loaded here -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- History Modal JavaScript -->
    <script>
        function showHistoryModal() {
            const modal = new bootstrap.Modal(document.getElementById('historyModal'));
            modal.show();
        }
        
        function viewHistory() {
            const domain = document.getElementById('historyDomain').value.trim();
            if (!domain) {
                alert('Please enter a domain name');
                return;
            }
            
            // Clean up domain - remove protocol and www if present
            let cleanDomain = domain.replace(/^https?:\/\//, '').replace(/^www\./, '').split('/')[0];
            
            // Navigate to history page
            window.location.href = `/audit/history/${encodeURIComponent(cleanDomain)}`;
        }
        
        // Allow Enter key to submit
        document.getElementById('historyDomain').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                viewHistory();
            }
        });
    </script>
    
    <!-- Notification System JavaScript -->
    <script>
        // Notification system
        let notificationModal;
        
        document.addEventListener('DOMContentLoaded', function() {
            notificationModal = new bootstrap.Modal(document.getElementById('notificationModal'));
            
            // Load notification badge on page load
            updateNotificationBadge();
            
            // Load banner notifications on page load
            updateBannerNotifications();
            
            // Load notifications when modal is shown
            document.getElementById('notificationModal').addEventListener('show.bs.modal', loadNotifications);
        });
        
        async function updateNotificationBadge() {
            try {
                const response = await fetch('/api/notifications/badge');
                const data = await response.json();
                
                if (data.success) {
                    const badge = document.getElementById('notificationCount');
                    const count = data.count || 0;
                    
                    if (count > 0) {
                        badge.textContent = count > 99 ? '99+' : count.toString();
                        badge.classList.remove('d-none');
                        
                        // Set badge color based on most severe type
                        badge.className = badge.className.replace(/bg-\w+/, '');
                        switch(data.mostSevereType) {
                            case 'critical':
                                badge.classList.add('bg-danger');
                                break;
                            case 'alert':
                                badge.classList.add('bg-warning');
                                break;
                            case 'message':
                                badge.classList.add('bg-success');
                                break;
                            default:
                                badge.classList.add('bg-secondary');
                        }
                    } else {
                        badge.classList.add('d-none');
                    }
                }
            } catch (error) {
                console.error('Error updating notification badge:', error);
            }
        }
        
        async function updateBannerNotifications() {
            try {
                const response = await fetch('/api/notifications/banner');
                const data = await response.json();
                
                if (data.success) {
                    displayBannerNotifications(data.notifications);
                }
            } catch (error) {
                console.error('Error updating banner notifications:', error);
            }
        }
        
        function displayBannerNotifications(notifications) {
            const container = document.getElementById('notification-banners');
            
            if (!notifications || notifications.length === 0) {
                container.innerHTML = '';
                return;
            }
            
            const bannersHtml = notifications.map(notification => {
                const alertClass = notification.type === 'critical' ? 'alert-danger' : 'alert-warning';
                const icon = notification.type === 'critical' ? 'fas fa-exclamation-triangle' : 'fas fa-exclamation-triangle';
                
                return `
                    <div class="container my-3">
                        <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                            <div class="d-flex align-items-center">
                                <i class="${icon} fa-2x me-3"></i>
                                <div class="flex-grow-1">
                                    <h5 class="alert-heading mb-1">${escapeHtml(notification.title)}</h5>
                                    <p class="mb-0">${escapeHtml(notification.message)}</p>
                                </div>
                            </div>
                            <button type="button" class="btn-close" onclick="dismissBannerNotification(${notification.id})" aria-label="Close"></button>
                        </div>
                    </div>
                `;
            }).join('');
            
            container.innerHTML = bannersHtml;
        }
        
        async function dismissBannerNotification(notificationId) {
            try {
                const response = await fetch(`/api/notifications/${notificationId}/read`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    updateBannerNotifications();
                    updateNotificationBadge();
                }
            } catch (error) {
                console.error('Error dismissing banner notification:', error);
            }
        }

        async function loadNotifications() {
            try {
                const response = await fetch('/api/notifications');
                const data = await response.json();
                
                if (data.success) {
                    displayNotifications(data.notifications, data.unreadCount);
                } else {
                    document.getElementById('notificationsList').innerHTML = '<div class="alert alert-warning">Failed to load notifications</div>';
                }
            } catch (error) {
                console.error('Error loading notifications:', error);
                document.getElementById('notificationsList').innerHTML = '<div class="alert alert-danger">Error loading notifications</div>';
            }
        }
        
        function displayNotifications(notifications, unreadCount) {
            const container = document.getElementById('notificationsList');
            const info = document.getElementById('notificationInfo');
            
            info.textContent = `${notifications.length} total notifications (${unreadCount} unread)`;
            
            if (notifications.length === 0) {
                container.innerHTML = '<div class="text-center text-muted py-4"><i class="fas fa-bell-slash fa-2x mb-2"></i><br>No notifications</div>';
                return;
            }
            
            const html = notifications.map(notification => {
                const typeIcon = {
                    'critical': 'fa-exclamation-triangle text-danger',
                    'alert': 'fa-exclamation-circle text-warning',
                    'message': 'fa-info-circle text-success'
                };
                
                const isUnread = !notification.is_read;
                const timeAgo = formatTimeAgo(new Date(notification.created_at));
                
                return `
                    <div class="notification-item border-bottom py-3 ${isUnread ? 'notification-unread' : ''}">
                        <div class="d-flex">
                            <div class="flex-shrink-0 me-3">
                                <i class="fas ${typeIcon[notification.type]} fa-lg"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="d-flex justify-content-between align-items-start">
                                    <h6 class="mb-1 ${isUnread ? 'fw-bold' : ''}">${escapeHtml(notification.title)}</h6>
                                    <small class="text-muted">${timeAgo}</small>
                                </div>
                                <p class="mb-1 text-muted">${escapeHtml(notification.message)}</p>
                                <div class="d-flex gap-2">
                                    ${isUnread ? `<button class="btn btn-sm btn-outline-primary" onclick="markNotificationAsRead(${notification.id})">Mark Read</button>` : ''}
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteNotification(${notification.id})">Delete</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
            container.innerHTML = html;
        }
        
        async function markNotificationAsRead(id) {
            try {
                const response = await fetch(`/api/notifications/${id}/read`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (response.ok) {
                    loadNotifications();
                    updateNotificationBadge();
                }
            } catch (error) {
                console.error('Error marking notification as read:', error);
            }
        }
        
        async function markAllNotificationsAsRead() {
            try {
                const response = await fetch('/api/notifications/read-all', {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (response.ok) {
                    loadNotifications();
                    updateNotificationBadge();
                }
            } catch (error) {
                console.error('Error marking all notifications as read:', error);
            }
        }
        
        async function deleteNotification(id) {
            if (!confirm('Are you sure you want to delete this notification?')) return;
            
            try {
                const response = await fetch(`/api/notifications/${id}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    loadNotifications();
                    updateNotificationBadge();
                }
            } catch (error) {
                console.error('Error deleting notification:', error);
            }
        }
        
        function formatTimeAgo(date) {
            const now = new Date();
            const diff = now - date;
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(diff / 3600000);
            const days = Math.floor(diff / 86400000);
            
            if (minutes < 1) return 'Just now';
            if (minutes < 60) return `${minutes}m ago`;
            if (hours < 24) return `${hours}h ago`;
            if (days < 7) return `${days}d ago`;
            return date.toLocaleDateString();
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    </script>
    
    <!-- Custom JS -->
    <script src="/js/main.js"></script>
</body>
</html>
