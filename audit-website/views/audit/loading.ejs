<%- include('../partials/header', { title: 'Analyzing Website - SiteScope', user: user }) %>

<!-- Loading Section -->
<section class="py-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10 text-center">
                <!-- Progress Steps -->
                <div class="row g-4 mb-5">
                    <div class="col-md-2">
                        <div class="progress-step active" id="step1">
                            <div class="step-icon bg-primary text-white rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-play fa-lg"></i>
                            </div>
                            <h6>Starting</h6>
                            <div class="progress mt-2" style="height: 4px;">
                                <div class="progress-bar bg-primary" style="width: 100%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="progress-step" id="step2">
                            <div class="step-icon bg-light text-muted rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-spider fa-lg"></i>
                            </div>
                            <h6>Crawling</h6>
                            <div class="progress mt-2" style="height: 4px;">
                                <div class="progress-bar bg-info" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="progress-step" id="step3">
                            <div class="step-icon bg-light text-muted rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-link fa-lg"></i>
                            </div>
                            <h6>External Links</h6>
                            <div class="progress mt-2" style="height: 4px;">
                                <div class="progress-bar bg-warning" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="progress-step" id="step4">
                            <div class="step-icon bg-light text-muted rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-cogs fa-lg"></i>
                            </div>
                            <h6>Analyzing</h6>
                            <div class="progress mt-2" style="height: 4px;">
                                <div class="progress-bar bg-success" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="progress-step" id="step5">
                            <div class="step-icon bg-light text-muted rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-chart-bar fa-lg"></i>
                            </div>
                            <h6>Finalizing</h6>
                            <div class="progress mt-2" style="height: 4px;">
                                <div class="progress-bar bg-primary" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="progress-step" id="step6">
                            <div class="step-icon bg-light text-muted rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-check fa-lg"></i>
                            </div>
                            <h6>Complete</h6>
                            <div class="progress mt-2" style="height: 4px;">
                                <div class="progress-bar bg-success" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Main Message -->
                <h1 class="display-6 fw-bold mb-4">Analyzing Your Website</h1>
                <p class="lead text-muted mb-3">
                    We're running a <strong><%= reportType === 'full' ? 'comprehensive' : 'quick' %></strong> audit of <strong><%= url %></strong>
                </p>
                
                <!-- User Limit Notice for Unregistered Users -->
                <% if (!user) { %>
                <div class="alert alert-info mb-4" role="alert">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>External Link Analysis Limited:</strong> As an unregistered user, external link checking is limited to 10 links.
                    <a href="/auth/register" class="alert-link ms-2">Register for unlimited analysis</a>
                </div>
                <% } %>
                
                <!-- Unified Progress Display -->
                <div class="card border-primary mb-4" id="progressCard">
                    <div class="card-header bg-primary text-white d-flex align-items-center">
                        <i class="fas fa-chart-line me-2"></i>
                        <span id="progressTitle">Audit Progress</span>
                        <div class="ms-auto">
                            <span class="badge bg-light text-primary" id="pageCounter" style="display: none;">Page 0/0</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Main Status Message -->
                        <div class="mb-3">
                            <h6 class="mb-2" id="currentMessage">Initializing audit...</h6>
                            <div class="d-flex align-items-center">
                                <div class="spinner-border spinner-border-sm text-primary me-2" id="activitySpinner" style="display: none;"></div>
                                <span id="detailedStatus" class="text-muted">Starting analysis...</span>
                            </div>
                        </div>
                        
                        <!-- Current URL Display (shown during crawling) -->
                        <div class="mb-3" id="urlDisplay" style="display: none;">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-link text-primary me-2"></i>
                                <strong id="urlLabel">Current URL:</strong>
                            </div>
                            <div class="bg-light p-2 rounded">
                                <code id="currentUrl" class="text-primary">Waiting for URL...</code>
                            </div>
                        </div>
                        
                        <!-- Unified Progress Bar -->
                        <div class="progress mb-2" style="height: 10px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                 id="mainProgressBar" style="width: 0%"></div>
                        </div>
                        
                        <!-- Progress Details -->
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted" id="progressDetails">Starting analysis...</small>
                            <small class="text-muted" id="progressText">0% Complete</small>
                        </div>
                    </div>
                </div>

                <!-- Estimated Time -->
                <div class="mt-4">
                    <small class="text-muted">
                        <i class="fas fa-clock me-1"></i>
                        Estimated time: <span id="estimatedTime"><%= reportType === 'full' ? '5-15 minutes' : '2-5 minutes' %></span>
                    </small>
                </div>

                <!-- Cancel Option -->
                <div class="mt-4">
                    <a href="/audit" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Start New Audit
                    </a>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Real-time Progress Updates via Server-Sent Events -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const sessionId = '<%= sessionId %>';
    const url = '<%= url %>';
    const reportType = '<%= reportType %>';
    
    // Initialize progress elements
    const progressCard = document.getElementById('progressCard');
    const progressTitle = document.getElementById('progressTitle');
    const currentMessage = document.getElementById('currentMessage');
    const detailedStatus = document.getElementById('detailedStatus');
    const progressDetails = document.getElementById('progressDetails');
    const progressText = document.getElementById('progressText');
    const mainProgressBar = document.getElementById('mainProgressBar');
    const activitySpinner = document.getElementById('activitySpinner');
    
    // URL display elements
    const urlDisplay = document.getElementById('urlDisplay');
    const currentUrlElement = document.getElementById('currentUrl');
    const pageCounter = document.getElementById('pageCounter');
    const urlLabel = document.getElementById('urlLabel');
    
    // Show progress card
    progressCard.style.display = 'block';
    
    // Step mapping
    const stepMapping = {
        'starting': { step: 1, color: 'primary', message: 'Initializing audit...' },
        'crawling': { step: 2, color: 'info', message: 'Crawling website pages...' },
        'external_links': { step: 3, color: 'warning', message: 'Checking external links...' },
        'analyzing': { step: 4, color: 'success', message: 'Analyzing website data...' },
        'finalizing': { step: 5, color: 'primary', message: 'Generating report...' },
        'completed': { step: 6, color: 'success', message: 'Audit completed!' },
        'error': { step: 0, color: 'danger', message: 'Audit failed' }
    };
    
    let currentStep = 1;
    let stepTimestamps = {}; // Track when each step started
    let pendingCompletion = null; // Store completion data if received early
    let minimumStepDuration = 5000; // 5 seconds minimum for steps 4, 5, 6
    
    // Steps that require minimum duration
    const minimumDurationSteps = [4, 5, 6]; // Analyzing, Finalizing, Complete
    
    // Function to handle step transitions with minimum duration
    function handleStepTransition(targetStep, color) {
        const now = Date.now();
        
        // Record timestamp for steps that require minimum duration
        if (minimumDurationSteps.includes(targetStep)) {
            if (!stepTimestamps[targetStep]) {
                stepTimestamps[targetStep] = now;
            }
        }
        
        // Update the step immediately
        updateStepProgress(targetStep, color);
        currentStep = targetStep;
    }
    
    // Function to check if enough time has passed for a step
    function canProceedToNextStep(step) {
        if (!minimumDurationSteps.includes(step)) {
            return true; // No minimum duration requirement
        }
        
        const startTime = stepTimestamps[step];
        if (!startTime) {
            return true; // No start time recorded
        }
        
        const elapsed = Date.now() - startTime;
        return elapsed >= minimumStepDuration;
    }
    
    // Function to handle delayed completion
    function handleDelayedCompletion() {
        if (pendingCompletion) {
            const targetStep = pendingCompletion.step;
            
            if (canProceedToNextStep(currentStep)) {
                // Proceed to next step
                handleStepTransition(targetStep, pendingCompletion.color);
                
                if (targetStep === 6) { // Complete step
                    setTimeout(() => {
                        window.location.href = `/audit/results/${sessionId}`;
                    }, 2000);
                }
                
                pendingCompletion = null;
            } else {
                // Wait a bit more
                setTimeout(handleDelayedCompletion, 500);
            }
        }
    }
    
    // Function to update unified progress display
    function updateUnifiedProgress(data) {
        // Update progress title based on status
        if (data.status) {
            const statusTitles = {
                'starting': 'Initializing Audit',
                'crawling': 'Crawling Website',
                'external_links': 'Checking External Links',
                'analyzing': 'Analyzing Data',
                'finalizing': 'Generating Report',
                'completed': 'Audit Complete'
            };
            
            if (statusTitles[data.status]) {
                progressTitle.textContent = statusTitles[data.status];
            }
        }
        
        // Show/hide URL display during crawling and external links
        if ((data.status === 'crawling' || data.status === 'external_links') && urlDisplay.style.display === 'none') {
            urlDisplay.style.display = 'block';
            pageCounter.style.display = 'inline-block';
            
            // Update URL label based on status
            if (data.status === 'crawling') {
                urlLabel.textContent = 'Current Page:';
            } else if (data.status === 'external_links') {
                urlLabel.textContent = 'Checking External Link:';
            }
        } else if (data.status && ['analyzing', 'finalizing', 'completed'].includes(data.status)) {
            urlDisplay.style.display = 'none';
            pageCounter.style.display = 'none';
        }
        
        // Update page counter with appropriate label
        if (data.pageCount && data.totalPages) {
            if (data.status === 'external_links') {
                pageCounter.textContent = `Link ${data.pageCount}/${data.totalPages}`;
            } else {
                pageCounter.textContent = `Page ${data.pageCount}/${data.totalPages}`;
            }
        }
        
        // Update current URL
        if (data.currentUrl) {
            currentUrlElement.textContent = data.currentUrl;
            // Truncate long URLs for better display
            if (data.currentUrl.length > 50) {
                const truncated = data.currentUrl.substring(0, 25) + '...' + data.currentUrl.substring(data.currentUrl.length - 20);
                currentUrlElement.textContent = truncated;
                currentUrlElement.title = data.currentUrl; // Full URL on hover
            }
        }
        
        // Update detailed status with activity indicator
        if (data.detailedStatus) {
            detailedStatus.textContent = data.detailedStatus;
            
            // Show spinner for active operations
            if (['Downloading', 'Analyzing', 'Processing collected data', 'Compiling results', 'Validating external link'].includes(data.detailedStatus)) {
                activitySpinner.style.display = 'inline-block';
            } else {
                activitySpinner.style.display = 'none';
            }
        }
        
        // Update progress bar color and animation based on status
        if (data.status) {
            const statusColors = {
                'starting': 'bg-primary',
                'crawling': 'bg-info',
                'external_links': 'bg-warning',
                'analyzing': 'bg-success',
                'finalizing': 'bg-primary',
                'completed': 'bg-success'
            };
            
            const colorClass = statusColors[data.status] || 'bg-primary';
            mainProgressBar.className = `progress-bar progress-bar-striped progress-bar-animated ${colorClass}`;
        }
    }
    
    // Setup Server-Sent Events
    const eventSource = new EventSource(`/audit/progress/${sessionId}`);
    
    eventSource.onmessage = function(event) {
        try {
            const data = JSON.parse(event.data);
            console.log('Progress update:', data);
            
            // Update progress information
            if (data.message) {
                currentMessage.textContent = data.message;
            }
            
            if (data.progress !== undefined) {
                const progress = Math.round(data.progress);
                mainProgressBar.style.width = progress + '%';
                progressText.textContent = progress + '% Complete';
                progressDetails.textContent = `Progress: ${progress}%`;
            }
            
            // Update unified progress display
            updateUnifiedProgress(data);
            
            // Update step visualization with minimum duration logic
            if (data.status && stepMapping[data.status]) {
                const stepInfo = stepMapping[data.status];
                const targetStep = stepInfo.step;
                
                // Special handling for steps with minimum duration requirements
                if (minimumDurationSteps.includes(targetStep)) {
                    if (targetStep > currentStep) {
                        // New step - transition immediately and start timer
                        handleStepTransition(targetStep, stepInfo.color);
                    }
                } else if (minimumDurationSteps.includes(currentStep) && targetStep > currentStep) {
                    // We're trying to move from a minimum duration step to the next step
                    if (canProceedToNextStep(currentStep)) {
                        handleStepTransition(targetStep, stepInfo.color);
                    } else {
                        // Store for delayed execution
                        pendingCompletion = { step: targetStep, color: stepInfo.color };
                        handleDelayedCompletion();
                    }
                } else {
                    // Normal step transition
                    handleStepTransition(targetStep, stepInfo.color);
                }
            }
            
            // Handle completion with delay logic
            if (data.status === 'completed') {
                const completionStep = stepMapping['completed'];
                
                if (minimumDurationSteps.includes(currentStep) && !canProceedToNextStep(currentStep)) {
                    // Store completion for delayed execution
                    pendingCompletion = { 
                        step: completionStep.step, 
                        color: completionStep.color,
                        isCompletion: true 
                    };
                    handleDelayedCompletion();
                } else {
                    // Can complete immediately
                    handleStepTransition(completionStep.step, completionStep.color);
                    setTimeout(() => {
                        window.location.href = `/audit/results/${sessionId}`;
                    }, 2000);
                }
            }
            
            // Handle errors
            if (data.status === 'error') {
                showError(data.error || 'An error occurred during the audit');
                eventSource.close();
            }
            
        } catch (e) {
            console.error('Error parsing progress data:', e);
        }
    };
    
    eventSource.onerror = function(event) {
        console.error('EventSource failed:', event);
        // Fallback: poll for results after a delay
        setTimeout(() => {
            window.location.href = `/audit/results/${sessionId}`;
        }, 10000);
    };
    
    // Close EventSource when page unloads
    window.addEventListener('beforeunload', () => {
        eventSource.close();
    });
    
    function updateStepProgress(targetStep, color) {
        // Complete previous steps
        for (let i = 1; i < targetStep; i++) {
            const stepEl = document.getElementById(`step${i}`);
            if (stepEl && !stepEl.classList.contains('completed')) {
                stepEl.classList.add('completed');
                stepEl.classList.remove('active');
                const icon = stepEl.querySelector('.step-icon');
                icon.className = 'step-icon bg-success text-white rounded-circle d-inline-flex align-items-center justify-content-center mb-3';
                const progressBar = stepEl.querySelector('.progress-bar');
                progressBar.style.width = '100%';
                progressBar.className = 'progress-bar bg-success';
            }
        }
        
        // Activate current step
        const currentStepEl = document.getElementById(`step${targetStep}`);
        if (currentStepEl && !currentStepEl.classList.contains('active')) {
            currentStepEl.classList.add('active');
            currentStepEl.classList.remove('completed');
            const icon = currentStepEl.querySelector('.step-icon');
            icon.className = `step-icon bg-${color} text-white rounded-circle d-inline-flex align-items-center justify-content-center mb-3`;
            const progressBar = currentStepEl.querySelector('.progress-bar');
            progressBar.className = `progress-bar bg-${color}`;
        }
    }
    
    function showError(errorMessage) {
        const alertHtml = `
            <div class="alert alert-danger alert-dismissible" role="alert">
                <h4 class="alert-heading">Audit Failed</h4>
                <p>${errorMessage}</p>
                <hr>
                <p class="mb-0">
                    <a href="/audit" class="btn btn-primary">Try Again</a>
                </p>
                <button type="button" class="btn-close" aria-label="Close"></button>
            </div>
        `;
        
        progressCard.innerHTML = alertHtml;
        
        // Add manual close functionality
        const closeBtn = progressCard.querySelector('.btn-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                const alert = closeBtn.closest('.alert');
                alert.style.opacity = '0';
                setTimeout(() => {
                    alert.remove();
                }, 300);
            });
        }
        progressCard.className = 'alert alert-danger mb-4';
    }
    
    // Fallback timeout in case SSE fails
    setTimeout(() => {
        if (!eventSource.readyState === EventSource.CLOSED) {
            console.log('Fallback: checking results after timeout');
            window.location.href = `/audit/results/${sessionId}`;
        }
    }, 300000); // 5 minutes maximum
});

// Start progress simulation
setTimeout(updateProgress, 1000);

// Add polling for actual results (uncomment in production)
/*
function checkResults() {
    fetch('/audit/status?url=' + encodeURIComponent('<%= url %>'))
        .then(response => response.json())
        .then(data => {
            if (data.completed) {
                window.location.href = '/audit/results?url=' + encodeURIComponent('<%= url %>');
            } else {
                setTimeout(checkResults, 2000);
            }
        })
        .catch(error => {
            console.error('Error checking status:', error);
            setTimeout(checkResults, 5000);
        });
}

// Start checking for results
setTimeout(checkResults, 5000);
*/
</script>

<style>
.progress-step {
    transition: all 0.3s ease;
}

.progress-step.active .step-icon {
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.progress-step.completed .step-icon {
    transform: scale(1);
}

.progress-bar {
    transition: width 0.3s ease;
}
</style>

<%- include('../partials/footer') %>
