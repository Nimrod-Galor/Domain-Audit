<%- include('../partials/header', { title: 'Analyzing Website - SiteScope', user: user }) %>

<!-- Loading Section -->
<section class="py-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10 text-center">
                <!-- Progress Steps -->
                <div class="row g-4 mb-5">
                    <div class="col-md-2">
                        <div class="progress-step active" id="step1">
                            <div class="step-icon bg-primary text-white rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-play fa-lg"></i>
                            </div>
                            <h6>Starting</h6>
                            <div class="progress mt-2" style="height: 4px;">
                                <div class="progress-bar bg-primary" style="width: 100%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="progress-step" id="step2">
                            <div class="step-icon bg-light text-muted rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-spider fa-lg"></i>
                            </div>
                            <h6>Crawling</h6>
                            <div class="progress mt-2" style="height: 4px;">
                                <div class="progress-bar bg-info" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="progress-step" id="step3">
                            <div class="step-icon bg-light text-muted rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-link fa-lg"></i>
                            </div>
                            <h6>External Links</h6>
                            <div class="progress mt-2" style="height: 4px;">
                                <div class="progress-bar bg-warning" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="progress-step" id="step4">
                            <div class="step-icon bg-light text-muted rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-cogs fa-lg"></i>
                            </div>
                            <h6>Analyzing</h6>
                            <div class="progress mt-2" style="height: 4px;">
                                <div class="progress-bar bg-success" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="progress-step" id="step5">
                            <div class="step-icon bg-light text-muted rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-chart-bar fa-lg"></i>
                            </div>
                            <h6>Finalizing</h6>
                            <div class="progress mt-2" style="height: 4px;">
                                <div class="progress-bar bg-primary" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="progress-step" id="step6">
                            <div class="step-icon bg-light text-muted rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 60px; height: 60px;">
                                <i class="fas fa-check fa-lg"></i>
                            </div>
                            <h6>Complete</h6>
                            <div class="progress mt-2" style="height: 4px;">
                                <div class="progress-bar bg-success" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Main Message -->
                <h1 class="display-6 fw-bold mb-4">Analyzing Your Website</h1>
                <p class="lead text-muted mb-3">
                    We're running a <strong><%= reportType === 'full' ? 'comprehensive' : 'quick' %></strong> audit of <strong><%= url %></strong>
                </p>
                
                <!-- Tier-aware User Guidance Section -->
                <% if (user) { %>
                    <% if (userTier) { %>
                        <div class="alert alert-<%= userTier.name === 'Enterprise' ? 'success' : userTier.name === 'Professional' ? 'primary' : userTier.name === 'Starter' ? 'warning' : 'info' %> mb-4" role="alert">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <i class="fas fa-<%= userTier.name === 'Enterprise' ? 'crown' : userTier.name === 'Professional' ? 'star' : userTier.name === 'Starter' ? 'rocket' : 'user' %> me-2"></i>
                                    <strong><%= userTier.name %> Plan:</strong> 
                                    <% if (userTier.name === 'Freemium') { %>
                                        Limited to <%= userTier.limits.external_links_per_audit %> external links, <%= userTier.limits.audits_per_month %> audits/month
                                    <% } else if (userTier.name === 'Starter') { %>
                                        Up to <%= userTier.limits.external_links_per_audit %> external links, <%= userTier.limits.audits_per_month %> audits/month
                                    <% } else if (userTier.name === 'Professional') { %>
                                        Up to <%= userTier.limits.external_links_per_audit %> external links, <%= userTier.limits.audits_per_month %> audits/month
                                    <% } else { %>
                                        Unlimited external links and audits
                                    <% } %>
                                </div>
                                <% if (userTier.name !== 'Enterprise') { %>
                                    <a href="/pricing" class="btn btn-sm btn-outline-<%= userTier.name === 'Professional' ? 'success' : 'primary' %>">
                                        <i class="fas fa-arrow-up me-1"></i>Upgrade
                                    </a>
                                <% } %>
                            </div>
                            <% if (userUsage && userTier.name !== 'Enterprise') { %>
                                <div class="mt-2">
                                    <small class="text-muted">
                                        This month: <%= userUsage.auditsThisMonth %> / <%= userTier.limits.audits_per_month %> audits used
                                        <% if (userUsage.auditsThisMonth >= userTier.limits.audits_per_month * 0.8) { %>
                                            <span class="badge bg-warning ms-2">Approaching limit</span>
                                        <% } %>
                                    </small>
                                </div>
                            <% } %>
                        </div>
                    <% } else { %>
                        <div class="alert alert-info mb-4" role="alert">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Getting Started:</strong> Analyzing with basic limits.
                            <a href="/pricing" class="alert-link ms-2">View plans for enhanced features</a>
                        </div>
                    <% } %>
                <% } else { %>
                    <div class="alert alert-info mb-4" role="alert">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>External Link Analysis Limited:</strong> As an unregistered user, external link checking is limited to 10 links.
                        <a href="/auth/register" class="alert-link ms-2">Register for unlimited analysis</a>
                    </div>
                <% } %>
                
                <!-- Unified Progress Display -->
                <div class="card border-primary mb-4" id="progressCard">
                    <div class="card-header bg-primary text-white d-flex align-items-center">
                        <i class="fas fa-chart-line me-2"></i>
                        <span id="progressTitle">Audit Progress</span>
                        <div class="ms-auto">
                            <span class="badge bg-light text-primary" id="pageCounter" style="display: none;">Page 0/0</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Main Status Message -->
                        <div class="mb-3">
                            <h6 class="mb-2" id="currentMessage">Initializing audit...</h6>
                            <div class="d-flex align-items-center">
                                <div class="spinner-border spinner-border-sm text-primary me-2" id="activitySpinner" style="display: none;"></div>
                                <span id="detailedStatus" class="text-muted">Starting analysis...</span>
                            </div>
                        </div>
                        
                        <!-- Current URL Display (shown during crawling) -->
                        <div class="mb-3" id="urlDisplay" style="display: none;">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-link text-primary me-2"></i>
                                <strong id="urlLabel">Current URL:</strong>
                                <span class="badge ms-2" id="phaseIndicator" style="display: none;"></span>
                            </div>
                            <div class="bg-light p-3 rounded border">
                                <div class="d-flex align-items-center">
                                    <div class="flex-grow-1">
                                        <code id="currentUrl" class="text-primary d-block mb-1">Waiting for URL...</code>
                                        <small class="text-muted" id="urlDetails">Preparing to start...</small>
                                    </div>
                                    <div class="ms-3">
                                        <i class="fas fa-spinner fa-spin text-info" id="urlActivityIcon" style="display: none;"></i>
                                        <i class="fas fa-check-circle text-success" id="urlSuccessIcon" style="display: none;"></i>
                                        <i class="fas fa-exclamation-triangle text-warning" id="urlWarningIcon" style="display: none;"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Unified Progress Bar -->
                        <div class="progress mb-2" style="height: 10px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                 id="mainProgressBar" style="width: 0%"></div>
                        </div>
                        
                        <!-- Progress Details -->
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted" id="progressDetails">Starting analysis...</small>
                            <small class="text-muted" id="progressText">0% Complete</small>
                        </div>
                    </div>
                </div>

                <!-- Estimated Time -->
                <div class="mt-4">
                    <small class="text-muted">
                        <i class="fas fa-clock me-1"></i>
                        Estimated time: <span id="estimatedTime"><%= reportType === 'full' ? '5-15 minutes' : '2-5 minutes' %></span>
                    </small>
                </div>

                <!-- Cancel Option -->
                <div class="mt-4">
                    <a href="/audit" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Start New Audit
                    </a>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Real-time Progress Updates via Server-Sent Events -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const sessionId = '<%= sessionId %>';
    const url = '<%= url %>';
    const reportType = '<%= reportType %>';
    
    // Initialize progress elements
    const progressCard = document.getElementById('progressCard');
    const progressTitle = document.getElementById('progressTitle');
    const currentMessage = document.getElementById('currentMessage');
    const detailedStatus = document.getElementById('detailedStatus');
    const progressDetails = document.getElementById('progressDetails');
    const progressText = document.getElementById('progressText');
    const mainProgressBar = document.getElementById('mainProgressBar');
    const activitySpinner = document.getElementById('activitySpinner');
    
    // URL display elements
    const urlDisplay = document.getElementById('urlDisplay');
    const currentUrlElement = document.getElementById('currentUrl');
    const urlDetails = document.getElementById('urlDetails');
    const pageCounter = document.getElementById('pageCounter');
    const urlLabel = document.getElementById('urlLabel');
    const phaseIndicator = document.getElementById('phaseIndicator');
    const urlActivityIcon = document.getElementById('urlActivityIcon');
    const urlSuccessIcon = document.getElementById('urlSuccessIcon');
    const urlWarningIcon = document.getElementById('urlWarningIcon');
    
    // Show progress card
    progressCard.style.display = 'block';
    
    // Step mapping
    const stepMapping = {
        'starting': { step: 1, color: 'primary', message: 'Initializing audit...' },
        'crawling': { step: 2, color: 'info', message: 'Crawling website pages...' },
        'external_links': { step: 3, color: 'warning', message: 'Checking external links...' },
        'analyzing': { step: 4, color: 'success', message: 'Analyzing website data...' },
        'finalizing': { step: 5, color: 'primary', message: 'Generating report...' },
        'completed': { step: 6, color: 'success', message: 'Audit completed!' },
        'error': { step: 0, color: 'danger', message: 'Audit failed' }
    };
    
    let currentStep = 1;
    let stepTimestamps = {}; // Track when each step started
    let pendingCompletion = null; // Store completion data if received early
    let minimumStepDuration = 5000; // 5 seconds minimum for steps 4, 5, 6
    
    // Steps that require minimum duration
    const minimumDurationSteps = [4, 5, 6]; // Analyzing, Finalizing, Complete
    
    // Function to handle step transitions with minimum duration
    function handleStepTransition(targetStep, color) {
        const now = Date.now();
        
        // Record timestamp for steps that require minimum duration
        if (minimumDurationSteps.includes(targetStep)) {
            if (!stepTimestamps[targetStep]) {
                stepTimestamps[targetStep] = now;
            }
        }
        
        // Update the step immediately
        updateStepProgress(targetStep, color);
        currentStep = targetStep;
    }
    
    // Function to check if enough time has passed for a step
    function canProceedToNextStep(step) {
        if (!minimumDurationSteps.includes(step)) {
            return true; // No minimum duration requirement
        }
        
        const startTime = stepTimestamps[step];
        if (!startTime) {
            return true; // No start time recorded
        }
        
        const elapsed = Date.now() - startTime;
        return elapsed >= minimumStepDuration;
    }
    
    // Function to handle delayed completion
    function handleDelayedCompletion() {
        if (pendingCompletion) {
            const targetStep = pendingCompletion.step;
            
            if (canProceedToNextStep(currentStep)) {
                // Proceed to next step
                handleStepTransition(targetStep, pendingCompletion.color);
                
                if (targetStep === 6) { // Complete step
                    setTimeout(() => {
                        window.location.href = `/audit/results/${sessionId}`;
                    }, 2000);
                }
                
                pendingCompletion = null;
            } else {
                // Wait a bit more
                setTimeout(handleDelayedCompletion, 500);
            }
        }
    }
    
    // Function to update unified progress display
    function updateUnifiedProgress(data) {
        // Update progress title based on status
        if (data.status) {
            const statusTitles = {
                'starting': 'Initializing Audit',
                'crawling': 'Crawling Website',
                'external_links': 'Checking External Links',
                'analyzing': 'Analyzing Data',
                'finalizing': 'Generating Report',
                'completed': 'Audit Complete'
            };
            
            if (statusTitles[data.status]) {
                progressTitle.textContent = statusTitles[data.status];
            }
        }
        
        // Show/hide URL display during crawling and external links
        if ((data.status === 'crawling' || data.status === 'external_links') && urlDisplay.style.display === 'none') {
            urlDisplay.style.display = 'block';
            pageCounter.style.display = 'inline-block';
            
            // Update URL label based on status
            if (data.status === 'crawling') {
                urlLabel.textContent = 'Current Page:';
            } else if (data.status === 'external_links') {
                urlLabel.textContent = 'Checking External Link:';
            }
        } else if (data.status && ['analyzing', 'finalizing', 'completed'].includes(data.status)) {
            urlDisplay.style.display = 'none';
            pageCounter.style.display = 'none';
        }
        
        // Update page counter with appropriate label
        if (data.pageCount && data.totalPages) {
            if (data.status === 'external_links') {
                pageCounter.textContent = `Link ${data.pageCount}/${data.totalPages}`;
            } else {
                pageCounter.textContent = `Page ${data.pageCount}/${data.totalPages}`;
            }
        }
        
        // Update current URL with enhanced display
        if (data.currentUrl) {
            currentUrlElement.textContent = data.currentUrl;
            
            // Extract domain for URL details
            try {
                const urlObj = new URL(data.currentUrl);
                const domain = urlObj.hostname;
                const path = urlObj.pathname;
                
                // Truncate long URLs for better display
                if (data.currentUrl.length > 60) {
                    const truncated = domain + (path.length > 25 ? path.substring(0, 25) + '...' : path);
                    currentUrlElement.textContent = truncated;
                    currentUrlElement.title = data.currentUrl; // Full URL on hover
                }
                
                // Update URL details based on phase
                if (data.phase) {
                    const phaseDetails = {
                        'queueing': `Queued for processing on ${domain}`,
                        'downloading': `Downloading content from ${domain}`,
                        'analyzing': `Analyzing page content and structure`,
                        'external_validation': `Validating external link to ${domain}`,
                        'external_result': `Completed validation of ${domain}`
                    };
                    
                    urlDetails.textContent = phaseDetails[data.phase] || `Processing ${domain}`;
                } else {
                    urlDetails.textContent = `Processing ${domain}`;
                }
                
            } catch (e) {
                // Fallback for invalid URLs
                urlDetails.textContent = 'Processing URL...';
            }
        }
        
        // Update phase indicator badge
        if (data.phase && phaseIndicator) {
            const phaseLabels = {
                'queueing': { text: 'QUEUED', class: 'bg-secondary' },
                'downloading': { text: 'DOWNLOADING', class: 'bg-info' },
                'analyzing': { text: 'ANALYZING', class: 'bg-success' },
                'external_validation': { text: 'VALIDATING', class: 'bg-warning' },
                'external_result': { text: 'VALIDATED', class: 'bg-success' },
                'external_init': { text: 'STARTING', class: 'bg-primary' }
            };
            
            const phaseInfo = phaseLabels[data.phase];
            if (phaseInfo) {
                phaseIndicator.textContent = phaseInfo.text;
                phaseIndicator.className = `badge ms-2 ${phaseInfo.class}`;
                phaseIndicator.style.display = 'inline-block';
            }
        }
        
        // Update activity icons based on phase
        function hideAllIcons() {
            urlActivityIcon.style.display = 'none';
            urlSuccessIcon.style.display = 'none';
            urlWarningIcon.style.display = 'none';
        }
        
        if (data.phase) {
            hideAllIcons();
            
            if (['downloading', 'analyzing', 'external_validation'].includes(data.phase)) {
                urlActivityIcon.style.display = 'inline-block';
            } else if (data.phase === 'external_result') {
                // Show appropriate icon based on result
                if (data.detailedStatus && data.detailedStatus.includes('OK')) {
                    urlSuccessIcon.style.display = 'inline-block';
                } else if (data.detailedStatus && (data.detailedStatus.includes('FAILED') || data.detailedStatus.includes('TIMEOUT'))) {
                    urlWarningIcon.style.display = 'inline-block';
                } else {
                    urlSuccessIcon.style.display = 'inline-block'; // Default to success
                }
            }
        }
        
        // Update detailed status with activity indicator
        if (data.detailedStatus) {
            detailedStatus.textContent = data.detailedStatus;
            
            // Show spinner for active operations
            if (['Downloading', 'Analyzing', 'Processing collected data', 'Compiling results', 'Validating external link'].includes(data.detailedStatus) ||
                data.detailedStatus.includes('Downloading') || data.detailedStatus.includes('Analyzing') || data.detailedStatus.includes('Validating')) {
                activitySpinner.style.display = 'inline-block';
            } else {
                activitySpinner.style.display = 'none';
            }
        }
        
        // Update progress bar color and animation based on status
        if (data.status) {
            const statusColors = {
                'starting': 'bg-primary',
                'crawling': 'bg-info',
                'external_links': 'bg-warning',
                'analyzing': 'bg-success',
                'finalizing': 'bg-primary',
                'completed': 'bg-success'
            };
            
            const colorClass = statusColors[data.status] || 'bg-primary';
            mainProgressBar.className = `progress-bar progress-bar-striped progress-bar-animated ${colorClass}`;
        }
    }
    
    // Setup Server-Sent Events with retry mechanism
    let eventSource = null;
    let retryCount = 0;
    const maxRetries = 5;
    let reconnectDelay = 1000; // Start with 1 second
    let isConnected = false;
    let lastProgressTime = Date.now();
    let lastProgressData = null; // Store last progress data to prevent duplicates
    let lastProgressTimestamp = 0; // Track timing of last progress
    const DUPLICATE_THRESHOLD = 500; // 500ms minimum between similar events (reduced from 1000ms)
    
    function createEventSource() {
        if (eventSource) {
            eventSource.close();
        }
        
        console.log(`📡 Creating EventSource connection (attempt ${retryCount + 1}/${maxRetries + 1})`);
        eventSource = new EventSource(`/audit/progress/${sessionId}`);
        
        eventSource.onopen = function(event) {
            console.log('✅ EventSource connected successfully');
            isConnected = true;
            retryCount = 0;
            reconnectDelay = 1000; // Reset delay on successful connection
            lastProgressTime = Date.now();
        };
        
        eventSource.onmessage = function(event) {
            try {
                const data = JSON.parse(event.data);
                const now = Date.now();
                
                // Update last progress time
                lastProgressTime = now;
                
                // Skip heartbeat messages
                if (data.type === 'connected') {
                    console.log('📡 SSE connection confirmed');
                    return;
                }
                
                // Create a unique key for this progress event to detect duplicates
                const progressKey = `${data.status}_${data.phase}_${data.progress}_${data.currentUrl}_${data.detailedStatus}`;
                
                // Skip duplicate progress events with timing consideration
                if (lastProgressData && lastProgressData === progressKey) {
                    const timeSinceLastProgress = now - lastProgressTimestamp;
                    if (timeSinceLastProgress < DUPLICATE_THRESHOLD) {
                        console.log(`🔄 Skipping duplicate progress event (${timeSinceLastProgress}ms ago):`, progressKey);
                        return;
                    }
                }
                
                // Store the current progress key and timestamp
                lastProgressData = progressKey;
                lastProgressTimestamp = now;
                
                console.log('Progress update:', data);
                
                // Update progress information
                if (data.message) {
                    currentMessage.textContent = data.message;
                }
                
                if (data.progress !== undefined) {
                    const progress = Math.round(data.progress);
                    mainProgressBar.style.width = progress + '%';
                    progressText.textContent = progress + '% Complete';
                    progressDetails.textContent = `Progress: ${progress}%`;
                }
                
                // Update unified progress display
                updateUnifiedProgress(data);
                
                // Update step visualization with minimum duration logic
                if (data.status && stepMapping[data.status]) {
                    const stepInfo = stepMapping[data.status];
                    const targetStep = stepInfo.step;
                    
                    // Special handling for steps with minimum duration requirements
                    if (minimumDurationSteps.includes(targetStep)) {
                        if (targetStep > currentStep) {
                            // New step - transition immediately and start timer
                            handleStepTransition(targetStep, stepInfo.color);
                        }
                    } else if (minimumDurationSteps.includes(currentStep) && targetStep > currentStep) {
                        // We're trying to move from a minimum duration step to the next step
                        if (canProceedToNextStep(currentStep)) {
                            handleStepTransition(targetStep, stepInfo.color);
                        } else {
                            // Store for delayed execution
                            pendingCompletion = { step: targetStep, color: stepInfo.color };
                            handleDelayedCompletion();
                        }
                    } else {
                        // Normal step transition
                        handleStepTransition(targetStep, stepInfo.color);
                    }
                }
                
                // Handle completion with delay logic
                if (data.status === 'completed') {
                    const completionStep = stepMapping['completed'];
                    
                    if (minimumDurationSteps.includes(currentStep) && !canProceedToNextStep(currentStep)) {
                        // Store completion for delayed execution
                        pendingCompletion = { 
                            step: completionStep.step, 
                            color: completionStep.color,
                            isCompletion: true 
                        };
                        handleDelayedCompletion();
                    } else {
                        // Can complete immediately
                        handleStepTransition(completionStep.step, completionStep.color);
                        setTimeout(() => {
                            window.location.href = `/audit/results/${sessionId}`;
                        }, 2000);
                    }
                }
                
                // Handle errors
                if (data.status === 'error') {
                    showError(data.error || 'An error occurred during the audit');
                    if (eventSource) {
                        eventSource.close();
                    }
                }
                
            } catch (e) {
                console.error('Error parsing progress data:', e);
            }
        };
        
        eventSource.onerror = function(event) {
            console.warn(`⚠️ EventSource error (state: ${eventSource.readyState})`, event);
            isConnected = false;
            
            // Check if this is a connection error vs. a server error
            if (eventSource.readyState === EventSource.CLOSED || eventSource.readyState === EventSource.CONNECTING) {
                if (retryCount < maxRetries) {
                    retryCount++;
                    console.log(`🔄 Retrying EventSource connection in ${reconnectDelay}ms (attempt ${retryCount}/${maxRetries})`);
                    
                    setTimeout(() => {
                        createEventSource();
                    }, reconnectDelay);
                    
                    // Exponential backoff
                    reconnectDelay = Math.min(reconnectDelay * 2, 10000); // Max 10 seconds
                } else {
                    console.error('❌ Max EventSource retries exceeded, falling back to polling');
                    fallbackToPolling();
                }
            }
        };
    }
    
    // Fallback polling mechanism
    function fallbackToPolling() {
        console.log('📊 Switching to fallback polling mode');
        showConnectionIssue();
        
        const pollInterval = setInterval(() => {
            fetch(`/audit/status/${sessionId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'completed') {
                        clearInterval(pollInterval);
                        window.location.href = `/audit/results/${sessionId}`;
                    } else if (data.status === 'error') {
                        clearInterval(pollInterval);
                        showError(data.error || 'Audit failed');
                    }
                    // Update progress if available
                    if (data.progress !== undefined) {
                        const progress = Math.round(data.progress);
                        mainProgressBar.style.width = progress + '%';
                        progressText.textContent = progress + '% Complete';
                    }
                })
                .catch(error => {
                    console.warn('⚠️ Polling error:', error);
                });
        }, 5000); // Poll every 5 seconds
        
        // Fallback timeout
        setTimeout(() => {
            clearInterval(pollInterval);
            window.location.href = `/audit/results/${sessionId}`;
        }, 300000); // 5 minutes maximum
    }
    
    // Show connection issue notification
    function showConnectionIssue() {
        const connectionAlert = document.createElement('div');
        connectionAlert.className = 'alert alert-warning mt-3';
        connectionAlert.innerHTML = `
            <i class="fas fa-wifi me-2"></i>
            <strong>Connection Issue:</strong> Real-time updates temporarily unavailable. 
            Using fallback polling mode...
        `;
        progressCard.appendChild(connectionAlert);
        
        // Remove after 10 seconds
        setTimeout(() => {
            if (connectionAlert.parentNode) {
                connectionAlert.remove();
            }
        }, 10000);
    }
    
    // Connection health check
    function checkConnectionHealth() {
        const timeSinceLastProgress = Date.now() - lastProgressTime;
        
        // If no progress updates for 60 seconds, assume connection issues
        if (isConnected && timeSinceLastProgress > 60000) {
            console.warn('⚠️ No progress updates for 60 seconds, reconnecting...');
            createEventSource();
        }
    }
    
    // Initialize EventSource
    createEventSource();
    
    // Health check every 30 seconds
    const healthCheck = setInterval(checkConnectionHealth, 30000);
    
    // Close EventSource when page unloads
    window.addEventListener('beforeunload', () => {
        if (eventSource) {
            eventSource.close();
        }
        clearInterval(healthCheck);
    });
    
    function updateStepProgress(targetStep, color) {
        // Complete previous steps
        for (let i = 1; i < targetStep; i++) {
            const stepEl = document.getElementById(`step${i}`);
            if (stepEl && !stepEl.classList.contains('completed')) {
                stepEl.classList.add('completed');
                stepEl.classList.remove('active');
                const icon = stepEl.querySelector('.step-icon');
                icon.className = 'step-icon bg-success text-white rounded-circle d-inline-flex align-items-center justify-content-center mb-3';
                const progressBar = stepEl.querySelector('.progress-bar');
                progressBar.style.width = '100%';
                progressBar.className = 'progress-bar bg-success';
            }
        }
        
        // Activate current step
        const currentStepEl = document.getElementById(`step${targetStep}`);
        if (currentStepEl && !currentStepEl.classList.contains('active')) {
            currentStepEl.classList.add('active');
            currentStepEl.classList.remove('completed');
            const icon = currentStepEl.querySelector('.step-icon');
            icon.className = `step-icon bg-${color} text-white rounded-circle d-inline-flex align-items-center justify-content-center mb-3`;
            const progressBar = currentStepEl.querySelector('.progress-bar');
            progressBar.className = `progress-bar bg-${color}`;
        }
    }
    
    function showError(errorMessage) {
        const alertHtml = `
            <div class="alert alert-danger alert-dismissible" role="alert">
                <h4 class="alert-heading">Audit Failed</h4>
                <p>${errorMessage}</p>
                <hr>
                <p class="mb-0">
                    <a href="/audit" class="btn btn-primary">Try Again</a>
                </p>
                <button type="button" class="btn-close" aria-label="Close"></button>
            </div>
        `;
        
        progressCard.innerHTML = alertHtml;
        
        // Add manual close functionality
        const closeBtn = progressCard.querySelector('.btn-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                const alert = closeBtn.closest('.alert');
                alert.style.opacity = '0';
                setTimeout(() => {
                    alert.remove();
                }, 300);
            });
        }
        progressCard.className = 'alert alert-danger mb-4';
    }
    
    // Fallback timeout in case SSE fails
    setTimeout(() => {
        if (!eventSource.readyState === EventSource.CLOSED) {
            console.log('Fallback: checking results after timeout');
            window.location.href = `/audit/results/${sessionId}`;
        }
    }, 300000); // 5 minutes maximum
});

// Start progress simulation
// setTimeout(updateProgress, 1000);

// Add polling for actual results (uncomment in production)
/*
function checkResults() {
    fetch('/audit/status?url=' + encodeURIComponent('<%= url %>'))
        .then(response => response.json())
        .then(data => {
            if (data.completed) {
                window.location.href = '/audit/results?url=' + encodeURIComponent('<%= url %>');
            } else {
                setTimeout(checkResults, 2000);
            }
        })
        .catch(error => {
            console.error('Error checking status:', error);
            setTimeout(checkResults, 5000);
        });
}

// Start checking for results
setTimeout(checkResults, 5000);
*/
</script>

<style>
.progress-step {
    transition: all 0.3s ease;
}

.progress-step.active .step-icon {
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.progress-step.completed .step-icon {
    transform: scale(1);
}

.progress-bar {
    transition: width 0.3s ease;
}

/* Enhanced URL display styling */
#urlDisplay {
    animation: fadeIn 0.3s ease-in;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}

#currentUrl {
    word-break: break-all;
    font-size: 0.9em;
    line-height: 1.3;
}

#urlDetails {
    font-size: 0.85em;
    font-style: italic;
}

#phaseIndicator {
    font-size: 0.7em;
    font-weight: 600;
    letter-spacing: 0.5px;
}

/* Activity icons styling */
.fa-spinner {
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Progress card animation */
#progressCard {
    transition: all 0.3s ease;
}

#progressCard:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

/* Badge animations */
.badge {
    transition: all 0.2s ease;
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

/* URL container styling */
.bg-light {
    transition: background-color 0.3s ease;
}

#urlDisplay .bg-light:hover {
    background-color: #f8f9fa !important;
}
</style>

<%- include('../partials/footer') %>
